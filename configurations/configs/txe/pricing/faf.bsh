/*************************************************
- BeanShell script pricing engine.
-
- Following is the list of available Utility and Transaction generation functions.
-
- percent	(Amount a, double p) : Returns a new Amount object, containing a percentage 'p' of given amount 'a'.
- add		(Amount a, Amount b) : Returns a new Amount object containing the sum of 'a' and 'b'.
- deduct	(Amount a, Amount b) : Returns a new Amount object containing the remaining value from 'a' after deducting 'b' from it.
- negate	(Amount a) 			 : Returns a new Amount object containing the negative equivalent of 'a'. 
-	
- addSenderTransaction		(Account ac, Amount am, AccountTransactionClassifier classifier) : Adds a transaction to transaction list.
-		
- addReceiverTransaction	(Account ac, Amount am, AccountTransactionClassifier classifier) : Adds a transaction to transaction list.
-			
- addOtherFeeTransaction	(Account ac, Amount am, AccountTransactionClassifier classifier) : Adds a transaction to transaction list.
-	
- Third parameter in the above mentioned function could be one of the following.
-
- AccountTransactionClassifier.Fee
- AccountTransactionClassifier.Commission
- AccountTransactionClassifier.Purchase
- AccountTransactionClassifier.Bonus
- AccountTransactionClassifier.Transfer
- AccountTransactionClassifier.Cash
- AccountTransactionClassifier.Deposit
- AccountTransactionClassifier.SetBalance
- AccountTransactionClassifier.Tax
-
- You can use the above mentioned functions in any order and combination, as long as 
- rule of zero sum is not broken, which is: "Sum of all transaction amounts should result in zero."
-
**/
// Default fee for all FAF operations.
FEE = "5";
// Calling one of the defined function, See below for a listing of 
// available functions.

calculate(Account sender, String operationId)
{ 
	// TODO extra checking should be added to handle charging of Fee on 
	// postpaid subscribers. If it is postpaid subscriber, no need to charge, 
	// just return;
	if (operationId.equals("FAF_INFO"))
	{
		FEE = "5";
	}
	else if (operationId.equals("FAF_ADD"))
	{
		FEE = "10";
	}
	else if (operationId.equals("FAF_REMOVE"))
	{
		FEE = "5";
	}
	else if (operationId.equals("FAF_REPLACE"))
	{
		FEE = "10";
	}
	else
	{	
		//Default fee
		FEE = "0";
	}
	f_amount = AmountUtils.finalizeAmount(new Amount(new BigDecimal(FEE), "EUR")).negate();
	bk_amount = AmountUtils.finalizeAmount(new Amount(new BigDecimal(FEE), "EUR"));
  	fee_account = new Account("BOOKKEEPING", "Fee");
   	addSenderTransaction(sender, f_amount, AccountTransactionClassifier.Fee);
   	
   	// BookKeeping account should be always classified as Fee with positive amount
   	addOtherTransaction(fee_account, bk_amount, AccountTransactionClassifier.Fee);
}
