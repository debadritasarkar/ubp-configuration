# The URL for publishing the transaction interface
subscriberTransactionURL=http://0.0.0.0:8087/subscribers/transaction
# The URL for publishing the management interface
subscriberManagementURL=http://0.0.0.0:8087/subscribers/management
# The URL for publishing the principal system interface
principalServiceURL=http://0.0.0.0:8087/principal
# The URL for publishing the custom operation service
customOperationServiceURL=http://0.0.0.0:8087/customOperations

# The database driver
subscribersystem.db_driver=org.mariadb.jdbc.Driver
# The database connection
subscribersystem.db_url=jdbc:mysql://localhost:3306/subscribers
# The database user name
subscribersystem.db_user=refill
# The database password
subscribersystem.db_password=refill
# The database commit mode
subscribersystem.db_autoCommit=false

#If non-null, the value of this Integer property determines the query timeout
# that will be used for Statements created from connections managed by the pool.
# null means that the driver default will be used.
subscribersystem.sdb_query_timeout=60000

#Sets the maximum number of Idle connections in the pool.
# If the total number of connections in the pool exceeds this number,
# the extra connections are released as soon as they are returned to the connection pool.
subscribersystem.pool_min_evictable_idle_time_millis=8

#The maximum number of milliseconds that the pool will wait (when there are no available connections)
# for a connection to be returned before throwing an exception, or -1 to wait indefinitely.
subscribersystem.db_shutdown_delay=-1

#The maximum lifetime in milliseconds of a connection.
# After this time is exceeded the connection will fail the next activation,
# passivation or validation test. A value of zero or less means the connection has an infinite lifetime.
subscribersystem.pool_max_connection_lifetime=-1

#The maximum number of open statements that can be allocated from the statement pool at the same time,
# or negative for no limit.
subscribersystem.db_MaxOpenPreparedStatements=-1

# The minimum pool size to use
subscribersystem.pool_min_size=1
# The maximum pool size to use
subscribersystem.pool_max_size=100
# The pool timeout of connections.
subscribersystem.pool_timeout=100
# How many connections can we build at once
subscribersystem.pool_simultaneous_build_throttle=40

# Check extra field is populated as well when fetching from DB
subscribersystem.verify.principal.account_type=false
# Comma separated list for account types where extraFields is used additionally
subscribersystem.use.extra_fields.account_types=AIRTIME

# Password encryption type to be used to store the passwords.
# The available types to choose one from are:
# MD5, SHA1, SHA256, SHA384, SHA512, CUSTOM1, CUSTOM2, CUSTOM3, CUSTOM4
# The latter three SHA formats use the subscriberId as part of the salt for
# increased security. The CUSTOMX formats require extra configuration to point
# out a plugin class locations. See example below this.
# If no matching format is found 'SHA1' will be used as default.
passwordEncryption=SHA256

# Password prefix to be used for generating new password when reset password
passwordPrefix=

# Password range to be used for generating new password when reset password
passwordRangeRegexp=[0-9]*

# Password length to be used for generating new password when reset password
passwordLength=4

# Default PIN/Password for a subscriber regardless of service. It is used when
# resetting passwords. Comment out the line if passwords should be randomly generated.
# NOTE! do not set defaultPassword to an empty string! You must comment the line out.
defaultPassword=0000

# Password expiry period in milliseconds. It can also be specified with
# suffixes: S/s (seconds), H/h (thousand), M/m (minutes), D/d (days), for
# example 30d for 30 days. Set to 0 to disable password expiry.
passwordExpiryPeriod=0

# Custom password digestors are plugin classes implementing the PasswordDigestor
# interface. You can configure up to 4 of these. They are numbered 1 to 4 and
# match the password formats CUSTOM1 to CUSTOM4
#custompassworddigestor.1.jarfile=/opt/seamless/conf/subscribersystem/customdigestor.jar
#custompassworddigestor.1.classname=com.seamless.example.digestor.ExampleDigestor


# PrincipalIdType of the subscriberIds stored in the system
# Only used by the principal interface
subscriberIdPrincipalTypeId=SUBSCRIBERMSISDN

# Default service is the service used to validate the principal when using the principal
# service and is added during auto creation of subscribers
defaultService=ALL

# Prefix for generated anonymousId
anonymousIdPrefix=26
# Length of generated anonymousId excluding the prefix length
anonymousIdlength=7

#value is in milliseconds; values > 0 indicates the duration for which the anonymousId generated is valid
#value <= 0 indicates the expiryPeriod feature is disabled
anonymousIdExpiryPeriod=180000
#if set to true, this will ensure each generated anonymousId will expire after midnight.
#this value is only effective when anonymousIdExpiryPeriod > 0
anonymousIdDailyExpiry=false

# Allowed Subscriber Services
# This will be checked when adding a service for subscriber
# To disable this simply comment it out.
subscriber.allowed_services=ETOPUP,ALL,MOLLET

# Account systems
# Account systems are used to validate a subscriber before creation. Here you tie an
# account type to the URL of an account operation service. Numbering starts from one
# and must be an unbroken sequence
accountOperationLink.1.accountType=AIRTIME
accountOperationLink.1.url=http://localhost:8091/accountlinksimulator/operations

accountOperationLink.2.accountType=DATA_BUNDLE
accountOperationLink.2.url=http://localhost:8091/accountlinksimulator/operations


#accountOperationLink.2.accountType=POSTPAID_AIRTIME
#accountOperationLink.2.url=http://localhost:8091/accountlinksimulator/operations

##changes start for priority based routing TS-4727##
#accountOperationLink.2.accountType=AIRTIME1
#accountOperationLink.2.url=http://localhost:8091/accountlinksimulator/operations
#accountOperationLink.3.accountType=MOBILEMONEY
#accountOperationLink.3.url=http://localhost:8091/accountlinksimulator/operations
#accountOperationLink.4.accountType=AIRTIME2
#accountOperationLink.4.url=http://localhost:8091/ye-mtn-ocslink/operations
#accountOperationLink.5.accountType=AIRTIME3
#accountOperationLink.5.url=http://localhost:8091/ye-mtn-ocslink/operations
##changes end for priority based routing TS-4727##

# Subscriber validation rules
# Here you define rules that validate a new subscriber before auto creation. There are
# three possible parameters for each rule.
#
# regExp - subscriberId must match this regexp, default is ".*".
# accountList - a comma separated list of account types. Each account type must have been
#               configured to point to an account system (see above). Each system will be
#               tested for the existence of the subscriberId
#               (using getAccountInformation()).
# requiredAccounts - How many of the account systems above that must successfully
#                    report an existing account for the rule to be considered successful.
#                    0 is allowed, 1 is default. This check is not applied on accounts in
#                    autoCreateAccountList.
# autoCreateAccountList - a comma separated list of account types. Accounts in this list
#                         are auto-created and not counted under the check requiredAccounts.
#                         These accounts should not be placed in accountList.
#
# The rules will be tested in order and the first one that is successful will be used.
# Accounts will be created for each successfully tested accountType from the rule. If no
# rule passed then no subscriber is created and PRINCIPAL_NOT_FOUND is returned.
subscriberValidation.1.regExp=467\\d{9}
subscriberValidation.1.accountList=AIRTIME
subscriberValidation.1.requiredAccounts=1
subscriberValidation.1.autoCreateAccountList=DATA_BUNDLE
#subscriberValidation.1.checkPostPaidAccountList=

##changes start for priority based routing TS-4727##
#subscriberValidation.1.regExp=245\\d{7}
#subscriberValidation.1.accountList=AIRTIME
#subscriberValidation.1.requiredAccounts=1
#subscriberValidation.1.priority=1
#subscriberValidation.1.autoCreateAccountList=

#subscriberValidation.2.regExp=245\\d{7}
#subscriberValidation.2.accountList=AIRTIME1
#subscriberValidation.2.requiredAccounts=1
#subscriberValidation.2.priority=4
#subscriberValidation.2.autoCreateAccountList=

#subscriberValidation.2.regExp=24560*-24561*
#subscriberValidation.2.accountList=AIRTIME1
#subscriberValidation.2.requiredAccounts=1
#subscriberValidation.2.priority=3
#subscriberValidation.2.autoCreateAccountList=
##changes end for priority based routing TS-4727##

# Authentication levels
# Each level can be assigned an integer that will be returned when resolving
# subscriber principals. It's probably a good idea to use the same levels
# across the whole system, in all principal services. A higher number means
# better authentication.
authenticationLevel.NO_PASSWORD=0
authenticationLevel.PASSWORD_VERIFIED=1

# Password policy settings
# - minLength and maxLength - defines the allowed length of the password
# - allowedCharacters - defines the characters that are allowed to be in the password,
#   all other characters are considered illegal.
# - requiredCharacters - defines charcter classes from which there must be at least one
#   character in the password.
# - requiredVariation - How many of the allowed character classes must be present in the
#   password for it to be valid.
# Possible character classes are UpperCaseLetters, LowerCaseLetters, Numbers, Symbols,
# OtherLetters. OtherLetters contains foreign script characters which has nu upper/lower
# distinction (Arabic, Chinese, Thai ...).
passwordPolicy.minLength=4
passwordPolicy.maxLength=4
passwordPolicy.allowedCharacters=Numbers
#passwordPolicy.requiredCharacters=Numbers, UpperCaseLetters, LowerCaseLetters, Symbols
#passwordPolicy.requiredVariation=2

# Custom principal type resolvers.
# A principal resolver is a class that extends the
# com.seamless.ers.extlink.subscriber.principal.interfaces.PrincipalResolverPlugin
# abstract class. Below is a list of custom resolver plugins, numbering starts at 1 and
# must be consecutive
# - principalTypeId - The principal type id which should be resolved using this resolver
# - jarFile - Full path to a jar file containing the resolver
# - classname - Full class name of the resolver class. Defaults to a WS plugin which calls a
#   web service resolver on the url configured in 'data.url'
# - data.* - any configuration needed for the resolver
#
#principalResolverPlugin.1.principalTypeId=SUBSCRIBERIMSI
#principalResolverPlugin.1.jarFile=/opt/seamless/conf/subscribersystem/IMSIResolver.jar
#principalResolverPlugin.1.className=com.seamless.ers.extlink.subscriber.plugin.IMSIResolver
#principalResolverPlugin.1.data.abc=xyz

# Flow control settings
flowcontrol.default.asynchronous=false
flowcontrol.default.cooldown_time=100
flowcontrol.default.max_parallel_requests=40

# The default graceful shutdown time for stopping the server in milliseconds.
# In case a shutdown takes longer time, a warning message will be printed in the log.
servicemanager.shutdown_hooks=SIGHUP:timeout=60000

# Path of the dynamic fields properties file
kyc.filename=kyc.properties

# JVM parameters
#
#env.jre.start_heap=128m
#env.jre.max_heap=512m
#env.jre.opts=

#########################
# P2P Auto-Registration #
#########################

# P2P AutoRegistration is a feature, if it is set to true:
# It will automatically attach P2P service with subscribers at the time of ResolvePrinciple.
# By Default auto registration will be disabled.
# if not provided, default value of defaultP2PPassword will be considered '0000'.
# if not provided, default value of P2PServiceId will be considered 'P2P'.


enableP2PAutoRegistration=false
enableP2PReRegistration=false
defaultP2PPassword=0000
p2pServiceId=P2P

subscribersystem.verify.principal.account_type=false