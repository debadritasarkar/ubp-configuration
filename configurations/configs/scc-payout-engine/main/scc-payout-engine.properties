# Properties for module scc-payout-engine

######## Spring Application configurations ############
spring.application.name=scc-payout-engine
server.port=9698
server.servlet.context-path=/${spring.application.name}

### scc-payout-engine: log4j logging config file
logging.config=/opt/seamless/conf/scc-payout-engine/log4j2.xml

# Keep the connection alive if idle for a long time
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1
# Jpa / Hibernate
spring.jpa.show-sql=false
spring.jpa.generate-ddl=false
spring.jpa.open-in-view=false
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
sprint.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDB10Dialect

spring.jackson.serialization.FAIL_ON_EMPTY_BEANS=false
#######################################################

################# Payout Spring Batch Configurations Starts #################
#Initialize spring batch schema if not present
spring.batch.initialize-schema=ALWAYS
 
#Disable this because we trigger jobs on our own
spring.batch.job.enabled=false
 
#Used to specify max how many rows to read from instant payout
scc.payout.instant.read.max.rows=500
scc.payout.batch.read.max.rows=500
 
scc.payout.instant.reader.query=SELECT `id`,`txn_id`,`reseller_id`,`reseller_name`,`campaign_name`,`kpi_uid`,`campaign_uid`,`state_id`,`net_payout_amount`,`tax_amount`,`gross_payout_amount`,`retry_count`,`max_retry_count`,`cms_status`,`tracker_status`,`created_date`,`updated_date`,`payment_date`,`extra_params` FROM scc_instant_payout WHERE retry_count < max_retry_count AND state_id = 2
scc.payout.batch.reader.query=SELECT * FROM scc_batch_payout WHERE retry_count < max_retry_count AND state_id IN (13, 10, 12) AND batch_id IN (SELECT batch_id FROM scc_batch_info WHERE status = 2 ORDER BY updated_date DESC)
 
#Used to specify what chunk sizes should payout be processed once the records are read
scc.payout.instant.chunk.size=100
scc.payout.batch.chunk.size=100
 
#Used to specify how many concurrent threads need to be used for processing the payout chunk
scc.payout.instant.concurrent.thread.count=5
scc.payout.batch.concurrent.thread.count=5
################# Payout Spring Batch Configurations Ends #################

########## Database Config Starts ##############
database.name=sccpayoutengine
database.db_driver=org.mariadb.jdbc.Driver
database.db_url=jdbc:mariadb://svc-haproxy:4306/sccpayoutengine
database.db_user=refill
database.db_password=refill
database.maximum_pool_size=20
database.pool_name=sccpayoutengine
database.minimum_idle=2
########## Database Config Ends ##############

##################### Message Resource Properties Starts ########################
locale.message.path=/opt/seamless/conf/scc-payout-engine
locale.message.prefix=messages
locale.message.defaultLocale=en-US
locale.message.supportedLocale=en-US,fr,ar
##################### Message Resource Properties Ends ##########################

################# Payout Specific Configurations Starts #################
scc.payout.state.default=APPROVED
scc.payout.states.all=APPROVED,PAYOUT_PENDING_APPROVAL,PAYOUT_ON_HOLD,PAYOUT_REJECTED,PROCESSED,FAILED
scc.payout.records.chunkSize=100
scc.payout.job.maxRetryCount=3
scc.payout.type.instant=INSTANT
scc.payout.type.arrears=ARREARS
scc.payout.type.batch=BATCH
scc.payout.batch.status.approved=APPROVED
scc.payout.batch.payout.autoApproval=AUTO_APPROVAL
scc.payout.batch.payout.onHold=PAYOUT_ON_HOLD
scc.payout.component.workflow.channel=SCCPAYOUT
//SCC Status
scc.payout.cms.statuses.inactive=Hold,Inactive,hold,inactive
//Reseller Status
scc.payout.tracker.statuses.active=active,Active
scc.payout.adjustment.allowed.status=PAYOUT_PENDING_APPROVAL,PAYOUT_REJECTED
scc.payout.batch.adjustment.denial.status=APPROVED,APPROVAL_PROCESS_STARTED
scc.payout.batch.approval.denial.status=ADJUSTMENT_INITIATED

scc.payout.non.payment.system=ERP,HRMS
scc.payout.ext.result.code.retry=900,901,999
scc.payout.paymentSystem=ERS

### Every 5 minutes starting at :00 minute after the hour
scc.payout.job.instant.cron=0 0/2 * * * ?
### MUST be running 1 hour after receiving batch data from commission component
scc.payout.job.batchinfo.cron=0 0/2 * * * ?
### MUST be running 1 hour after running batch info job
scc.payout.job.batch.cron=0 0/2 * * * ?
### Manual Adjustment Payout Job
scc.payout.job.adjustment.cron=0 0/2 * * * ?
### Retry Failed Payout Job
scc.payout.job.retrypayout.cron=0 0 0 * * ?

scc.payout.notify.first.approval=true
################# Payout Specific Configurations Ends #################

# Below states mean a list of states in which batch payout records should be rejected / auto rejected if request raised by user or system respectively for non-adjusted records
scc.payout.non.adjusted.states=DISBURSEMENT_PENDING,ADJUSTMENT_NOT_CONSIDERED

# Below states mean a list of states in which batch payout records should be rejected / auto rejected if request raised by user or system respectively for adjusted records
scc.payout.adjusted.states=ADJUSTMENT_COMPLETED,ADJUSTMENT_FAILED

################# SCC Std Link Configurations Starts #################
scc.std.link.uri=http://svc-scc-std:9597/scc-std-link
scc.std.api.endpoint=/payment/makePayment
scc.std.system.token.value={\"ersReference\":\"1000000000001\",\"startTime\":1617446496,\"rootComponent\":\"KYC-SYSTEM\",\"context\":{\"client\":{\"channel\":\"Web\",\"clientId\":\"DCAGENT-1-1-1\"},\"initiator\":{\"uid\":\"DEALER1-1\",\"typ\":\"RESELLERUSERNAME\",\"rtp\":\"Direct Channel Agent\"}}}
scc.std.api.authorization.value=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwYXlsb2FkIjoiMkpNUWl2TlFYM0lhcVd3OGg0WHVEa205UWwzM2FZZEFPZkNCbkFINDc0T1I1U1hEWTR1eW95NVl4a2UxR1dnNGJLU0xJNFU2aDFRTk5VRkpSbEdZN0lUdVVLOEZvbE5nakxUT0pUY2RoenlmL1RwbzlBL1JHN1ZLV29nY1h5eFVTclNuUXBubXZpNERnZDE0WSsxVmpzNTYrVGEvMmU1L2RkV1BZd3J4YXlOeDExVlcvc1k0dDl1NFRnTXlSQUR2dlRraEkxMXRIUXV6N2FVM0NVVUluVDlwVjFYMWNKMlJ6cEs5WjVOSnJxR2VHamdSOWVSUXltdVZCTzNKYjVMN3Jjc2RnWGozemYyYWtoTG93NWxsZUZqc3VjRlBWdDNLIiwiaXNzIjoiRVJTMzYwIiwiZXhwIjoxNjYwNzc5MTkxLCJpYXQiOjE2NjA3NDkxOTF9.dV9hVTRorT0VpF5TMiD2H3iBFZASld9PlMYv0iz1T4A
################# SCC Std Link Configurations Ends #################

################# Campaign Redis Specific Configurations Starts #################
campaign.redis.link.uri=http://svc-scc-engine:9596/scc
campaign.redis.api.endpoint=/v1/campaign/{CAMPAIGN_UID}
campaign.redis.api.notification.endpoint=/notification
################# Campaign Redis Specific Configurations Ends #################

################# NM Configurations Starts #################
notification.link.uri=http://svc-notification-manager:8277/
notification.api.endpoint=register-generic-notification
################# NM Configurations Ends #################

################# Workflow/GMS Configurations Starts #################
group.management.uri=http://svc-group-management:8084/groupmanagementsystem
group.management.api.workflow.approval=/v1/workflow/workflow-tracker
group.management.api.get.pending.approval=/v1/workflow/pending-approvals
group.management.api.approve.reject.workflow.ref=/v1/workflow/{referenceId}/{action}
################# Workflow/GMS Configurations Ends #################

################# Commission Tax Calculation Configurations Starts #################
commission.engine.link.uri=http://svc-scc-commission:9259/scc-commission-engine
commission.engine.calcTax.api.endpoint=/calculate-tax
################# Commission Tax Calculation Configurations Ends #################

############# Web Client properties Start ################################
web.client.http.max.idle=50000
web.client.http.connection.timeout=20000
############# Web Client properties End ################################

##################### Payout Sender Properties Starts ########################
scc.payout.sender.id.type=RESELLERID
scc.payout.sender.id=Scc_operator
scc.payout.sender.account.type.id=BOOKKEEPING
scc.payout.sender.account.id=Scc_operator
scc.payout.sender.addlPropertiesKey=preferredLanguage
scc.payout.sender.addlPropertiesValue=en

scc.payout.receiver.id.type=RESELLERID
scc.payout.receiver.account.type.id=RESELLER
#keep this empty until payout needs disburse to specific receiver account id
scc.payout.receiver.account.id=
scc.payout.receiver.addlPropertiesKey=preferredLanguage
scc.payout.receiver.addlPropertiesValue=en

#scc.payout.product.sku=TRANSFER
#SccCommissionTransfer is distinct SKU bind to operator's SCC book keeping account
scc.payout.product.sku=SccCommissionTransfer
scc.payout.product.addlPropertiesKey=preferredLanguage
scc.payout.product.addlPropertiesValue=en

scc.payout.currency=SEK
scc.payout.addlPropertiesKey=preferredLanguage
scc.payout.addlPropertiesValue=en
##################### Payout Sender Properties Ends ########################

########################## RabbitMq Properties Starts ##########################
## RabbitMq Producer
rabbitmq-producer-props.connectionName=${spring.application.name}-emitter
rabbitmq-producer-props.host=svc-rabbitmq
rabbitmq-producer-props.port=5672
rabbitmq-producer-props.userName=guest
rabbitmq-producer-props.userPasswd=guest

# RabbitMq producer: exchange, routing-key(s) & queue-name(s)
rabbitmq-producer-props.direct-exchange-name=scc-payout-exchange-dev
rabbitmq-producer-props.routing-key=scc-payout-success-routing-key-dev
rabbitmq-producer-props.queue-name=scc-payout-success-queue-dev

# RabbitMq producer acknowledge wait time in (milli-seconds)
rabbitmq-producer-props.acknowledge-wait-time=10000

## RabbitMq Consumer
rabbitmq-consumer-props.connectionName=${spring.application.name}-listener
rabbitmq-consumer-props.host=svc-rabbitmq
rabbitmq-consumer-props.port=5672
rabbitmq-consumer-props.userName=guest
rabbitmq-consumer-props.userPasswd=guest

# RabbitMq consumer queue-name(s)
rabbitmq-consumer-props.queueNames=scc-commission-success-queue-dev

## RabbitMq extra configurations
rabbitmq.message.correlation.id=spring_returned_message_correlation
rabbitmq.message.transaction.id=payout_transaction_id
########################## RabbitMq Properties Ends ############################

########### Elastic search configuration Starts ##########
elasticsearch.cluster.name=elasticsearch
elasticsearch.1.url=svc-haproxy
elasticsearch.1.port=9200
elasticsearch.1.index.name=reseller_data_lake
elasticsearch.data.feed.key.sccStatus=dms.resellerInfo.additionalFields
elasticsearch.data.feed.key.sccStatus.addlFieldName=sccStatus
elasticsearch.data.feed.key.trackerStatus=dms.resellerInfo.reseller.status
########### Elastic search configuration Starts ##########

################ DataFeeder Properties Starts ############################
#-------------------------------------------------------------------------------------
# Data feed version
#-------------------------------------------------------------------------------------
dataFeed.version=1
dataFeed.componentName=sccpayoutengine
dataFeed.eventType=Report
dataFeed.freemarker.file.path=/opt/seamless/conf/scc-payout-engine/templates/tdr
dataFeed.operationType=COMMISSION_PAYOUT
#-------------------------------------------------------------------------------------
# Data feed executor service
#-------------------------------------------------------------------------------------
threadpoolmanager.pools.dataFeed.targetId=com.seamless.common.data.dump.dataFeed
threadpoolmanager.pools.dataFeed.corePoolSize=25
threadpoolmanager.pools.dataFeed.maxPoolSize=40
threadpoolmanager.pools.dataFeed.keepAliveTime=60000
threadpoolmanager.pools.dataFeed.keepAliveTimeUnit=MILLISECONDS
#-------------------------------------------------------------------------------------
# Data feed templates
#-------------------------------------------------------------------------------------
template.COMMISSION_PAYOUT=sccPayoutFeed.ftl

################ DataFeeder Properties Ends ############################

##### enable apiCompatibilityMode for elastic search version 7.11 and higher
elasticsearch.apiCompatibilityMode=false
 
elasticsearch.1.reseller.id.field.name=dms.resellerInfo.reseller.resellerId.keyword
elasticsearch.1.reseller.msisdn.field.name=dms.resellerInfo.reseller.resellerMSISDN.keyword
 
